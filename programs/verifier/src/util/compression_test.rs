use std::time::{Instant};
use hex_literal::hex;
use crate::util::compression::Compressor;

#[test]
fn test_compression_decompression() {
    let original_data = b"Test data for compression and decompression";
    let compressed_data = Compressor::compress(original_data);
    let decompressed_data = Compressor::decompress(&compressed_data);

    assert_eq!(original_data.to_vec(), decompressed_data, "Decompressed data does not match the original data");
}

#[test]
fn test_compression() {
    let original_data = b"Test data for compression_0000000000000000000000000000000";
    let compressed_data = Compressor::compress(original_data);

    assert!(compressed_data.len() < original_data.len(), "Compressed data is not smaller than the original data");
}

#[test]
fn output_compression_bytes_saved() {
    let test_report_input = hex!("000906f3cbb5a230ad230e8f693aecc4aa5ff7a5c63ecf67ec7201c8a237152c000000000000000000000000000000000000000000000000000000000027018a000000000000000000000000000000000000000000000000000000010000000100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000280010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200003ab9412a454b0fb347d0c2c3062186f60640057203d5fb20982d7fb9c927f0000000000000000000000000000000000000000000000000000000067aa71400000000000000000000000000000000000000000000000000000000067aa71400000000000000000000000000000000000000000000000000000221896f269e60000000000000000000000000000000000000000000000000012f260aec4d6000000000000000000000000000000000000000000000000000000000067abc2c00000000000000000000000000000000000000000000000000de08c8d4fa030c80000000000000000000000000000000000000000000000000de065a57df39d200000000000000000000000000000000000000000000000000de0e2fe819758000000000000000000000000000000000000000000000000000000000000000002f173d87393dd8a9dcb97847d1a9a0710e7e4216655477631523a2284e7672790c758cd6413f08d730a3c96b3ede2aca6c9daa554f57b3221754aa579bcea720100000000000000000000000000000000000000000000000000000000000000026284f170f3e580bc532020b1f526b75d7012a632003da5d30f316434689e499509bb8dee47c9c92896e3b2350a74ffcdd564286fc250fe31df3043cfdc2951ef");

    let before_timestamp = Instant::now();
    let compressed_data = Compressor::compress(&test_report_input);
    let compression_duration = before_timestamp.elapsed();

    let size_reduction = test_report_input.len() - compressed_data.len();

    println!("Compressed length: {}", compressed_data.len());
    println!("Normal length: {}", test_report_input.len());
    println!("Compression size reduction: {}", size_reduction);
    println!("Compression Time Micros: {}", compression_duration.as_micros());
}