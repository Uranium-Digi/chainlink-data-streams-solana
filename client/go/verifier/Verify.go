// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package verifier

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Verify is the `verify` instruction.
type Verify struct {
	SignedReport *[]byte

	// [0] = [] verifierAccount
	//
	// [1] = [] accessController
	//
	// [2] = [SIGNER] user
	//
	// [3] = [] configAccount
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewVerifyInstructionBuilder creates a new `Verify` instruction builder.
func NewVerifyInstructionBuilder() *Verify {
	nd := &Verify{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetSignedReport sets the "signedReport" parameter.
func (inst *Verify) SetSignedReport(signedReport []byte) *Verify {
	inst.SignedReport = &signedReport
	return inst
}

// SetVerifierAccountAccount sets the "verifierAccount" account.
func (inst *Verify) SetVerifierAccountAccount(verifierAccount ag_solanago.PublicKey) *Verify {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(verifierAccount)
	return inst
}

// GetVerifierAccountAccount gets the "verifierAccount" account.
func (inst *Verify) GetVerifierAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetAccessControllerAccount sets the "accessController" account.
func (inst *Verify) SetAccessControllerAccount(accessController ag_solanago.PublicKey) *Verify {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(accessController)
	return inst
}

// GetAccessControllerAccount gets the "accessController" account.
func (inst *Verify) GetAccessControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetUserAccount sets the "user" account.
func (inst *Verify) SetUserAccount(user ag_solanago.PublicKey) *Verify {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(user).SIGNER()
	return inst
}

// GetUserAccount gets the "user" account.
func (inst *Verify) GetUserAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetConfigAccountAccount sets the "configAccount" account.
func (inst *Verify) SetConfigAccountAccount(configAccount ag_solanago.PublicKey) *Verify {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(configAccount)
	return inst
}

// GetConfigAccountAccount gets the "configAccount" account.
func (inst *Verify) GetConfigAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst Verify) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Verify,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Verify) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Verify) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.SignedReport == nil {
			return errors.New("SignedReport parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.VerifierAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.AccessController is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.User is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ConfigAccount is not set")
		}
	}
	return nil
}

func (inst *Verify) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Verify")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("SignedReport", *inst.SignedReport))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        verifier", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("accessController", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("            user", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("          config", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj Verify) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `SignedReport` param:
	err = encoder.Encode(obj.SignedReport)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Verify) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `SignedReport`:
	err = decoder.Decode(&obj.SignedReport)
	if err != nil {
		return err
	}
	return nil
}

// NewVerifyInstruction declares a new Verify instruction with the provided parameters and accounts.
func NewVerifyInstruction(
	// Parameters:
	signedReport []byte,
	// Accounts:
	verifierAccount ag_solanago.PublicKey,
	accessController ag_solanago.PublicKey,
	user ag_solanago.PublicKey,
	configAccount ag_solanago.PublicKey) *Verify {
	return NewVerifyInstructionBuilder().
		SetSignedReport(signedReport).
		SetVerifierAccountAccount(verifierAccount).
		SetAccessControllerAccount(accessController).
		SetUserAccount(user).
		SetConfigAccountAccount(configAccount)
}
