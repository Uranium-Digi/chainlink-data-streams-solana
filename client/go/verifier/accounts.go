// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package verifier

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
)

type VerifierAccount struct {
	Version               uint8
	Padding               [7]uint8
	VerifierAccountConfig VerifierAccountConfig
	DonConfigs            DonConfigs
}

var VerifierAccountDiscriminator = [8]byte{81, 120, 248, 87, 107, 174, 58, 157}

func (obj VerifierAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VerifierAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Version` param:
	err = encoder.Encode(obj.Version)
	if err != nil {
		return err
	}
	// Serialize `Padding` param:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return err
	}
	// Serialize `VerifierAccountConfig` param:
	err = encoder.Encode(obj.VerifierAccountConfig)
	if err != nil {
		return err
	}
	// Serialize `DonConfigs` param:
	err = encoder.Encode(obj.DonConfigs)
	if err != nil {
		return err
	}
	return nil
}

func (obj *VerifierAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VerifierAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[81 120 248 87 107 174 58 157]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Version`:
	err = decoder.Decode(&obj.Version)
	if err != nil {
		return err
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return err
	}
	// Deserialize `VerifierAccountConfig`:
	err = decoder.Decode(&obj.VerifierAccountConfig)
	if err != nil {
		return err
	}
	// Deserialize `DonConfigs`:
	err = decoder.Decode(&obj.DonConfigs)
	if err != nil {
		return err
	}
	return nil
}
