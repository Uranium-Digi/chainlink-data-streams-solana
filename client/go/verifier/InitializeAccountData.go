// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package verifier

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initializes the verifier (admin) account data. Call after initialize + realloc
// We use an optional access controller.
// See https://github.com/coral-xyz/anchor/pull/2101 on how option works in Anchor
type InitializeAccountData struct {

	// [0] = [WRITE] verifierAccount
	//
	// [1] = [SIGNER] owner
	//
	// [2] = [] accessController
	//
	// [3] = [] program
	//
	// [4] = [] programData
	//
	// [5] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewInitializeAccountDataInstructionBuilder creates a new `InitializeAccountData` instruction builder.
func NewInitializeAccountDataInstructionBuilder() *InitializeAccountData {
	nd := &InitializeAccountData{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 6),
	}
	return nd
}

// SetVerifierAccountAccount sets the "verifierAccount" account.
func (inst *InitializeAccountData) SetVerifierAccountAccount(verifierAccount ag_solanago.PublicKey) *InitializeAccountData {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(verifierAccount).WRITE()
	return inst
}

// GetVerifierAccountAccount gets the "verifierAccount" account.
func (inst *InitializeAccountData) GetVerifierAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *InitializeAccountData) SetOwnerAccount(owner ag_solanago.PublicKey) *InitializeAccountData {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *InitializeAccountData) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAccessControllerAccount sets the "accessController" account.
func (inst *InitializeAccountData) SetAccessControllerAccount(accessController ag_solanago.PublicKey) *InitializeAccountData {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(accessController)
	return inst
}

// GetAccessControllerAccount gets the "accessController" account.
func (inst *InitializeAccountData) GetAccessControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProgramAccount sets the "program" account.
func (inst *InitializeAccountData) SetProgramAccount(program ag_solanago.PublicKey) *InitializeAccountData {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *InitializeAccountData) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetProgramDataAccount sets the "programData" account.
func (inst *InitializeAccountData) SetProgramDataAccount(programData ag_solanago.PublicKey) *InitializeAccountData {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(programData)
	return inst
}

// GetProgramDataAccount gets the "programData" account.
func (inst *InitializeAccountData) GetProgramDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *InitializeAccountData) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *InitializeAccountData {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *InitializeAccountData) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

func (inst InitializeAccountData) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_InitializeAccountData,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst InitializeAccountData) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *InitializeAccountData) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.VerifierAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AccessController is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Program is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.ProgramData is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *InitializeAccountData) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("InitializeAccountData")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=6]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        verifier", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("accessController", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("         program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("     programData", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("   systemProgram", inst.AccountMetaSlice.Get(5)))
					})
				})
		})
}

func (obj InitializeAccountData) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *InitializeAccountData) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewInitializeAccountDataInstruction declares a new InitializeAccountData instruction with the provided parameters and accounts.
func NewInitializeAccountDataInstruction(
	// Accounts:
	verifierAccount ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	accessController ag_solanago.PublicKey,
	program ag_solanago.PublicKey,
	programData ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *InitializeAccountData {
	return NewInitializeAccountDataInstructionBuilder().
		SetVerifierAccountAccount(verifierAccount).
		SetOwnerAccount(owner).
		SetAccessControllerAccount(accessController).
		SetProgramAccount(program).
		SetProgramDataAccount(programData).
		SetSystemProgramAccount(systemProgram)
}
