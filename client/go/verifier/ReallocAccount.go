// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package verifier

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// ReallocAccount is the `reallocAccount` instruction.
type ReallocAccount struct {
	Len *uint32

	// [0] = [WRITE] verifierAccount
	//
	// [1] = [WRITE, SIGNER] owner
	//
	// [2] = [] program
	//
	// [3] = [] programData
	//
	// [4] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewReallocAccountInstructionBuilder creates a new `ReallocAccount` instruction builder.
func NewReallocAccountInstructionBuilder() *ReallocAccount {
	nd := &ReallocAccount{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 5),
	}
	return nd
}

// SetLen sets the "len" parameter.
func (inst *ReallocAccount) SetLen(len uint32) *ReallocAccount {
	inst.Len = &len
	return inst
}

// SetVerifierAccountAccount sets the "verifierAccount" account.
func (inst *ReallocAccount) SetVerifierAccountAccount(verifierAccount ag_solanago.PublicKey) *ReallocAccount {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(verifierAccount).WRITE()
	return inst
}

// GetVerifierAccountAccount gets the "verifierAccount" account.
func (inst *ReallocAccount) GetVerifierAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *ReallocAccount) SetOwnerAccount(owner ag_solanago.PublicKey) *ReallocAccount {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *ReallocAccount) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetProgramAccount sets the "program" account.
func (inst *ReallocAccount) SetProgramAccount(program ag_solanago.PublicKey) *ReallocAccount {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *ReallocAccount) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetProgramDataAccount sets the "programData" account.
func (inst *ReallocAccount) SetProgramDataAccount(programData ag_solanago.PublicKey) *ReallocAccount {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(programData)
	return inst
}

// GetProgramDataAccount gets the "programData" account.
func (inst *ReallocAccount) GetProgramDataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *ReallocAccount) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *ReallocAccount {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *ReallocAccount) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

func (inst ReallocAccount) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ReallocAccount,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ReallocAccount) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ReallocAccount) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Len == nil {
			return errors.New("Len parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.VerifierAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Program is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.ProgramData is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *ReallocAccount) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ReallocAccount")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Len", *inst.Len))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=5]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     verifier", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("      program", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  programData", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(4)))
					})
				})
		})
}

func (obj ReallocAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Len` param:
	err = encoder.Encode(obj.Len)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ReallocAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Len`:
	err = decoder.Decode(&obj.Len)
	if err != nil {
		return err
	}
	return nil
}

// NewReallocAccountInstruction declares a new ReallocAccount instruction with the provided parameters and accounts.
func NewReallocAccountInstruction(
	// Parameters:
	len uint32,
	// Accounts:
	verifierAccount ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	program ag_solanago.PublicKey,
	programData ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *ReallocAccount {
	return NewReallocAccountInstructionBuilder().
		SetLen(len).
		SetVerifierAccountAccount(verifierAccount).
		SetOwnerAccount(owner).
		SetProgramAccount(program).
		SetProgramDataAccount(programData).
		SetSystemProgramAccount(systemProgram)
}
