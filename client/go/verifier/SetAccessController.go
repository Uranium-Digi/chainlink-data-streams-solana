// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package verifier

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Used to Set the access controller
// We use an optional access controller.
// See https://github.com/coral-xyz/anchor/pull/2101 on how option works in Anchor
type SetAccessController struct {

	// [0] = [WRITE] verifierAccount
	//
	// [1] = [SIGNER] owner
	//
	// [2] = [] accessController
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetAccessControllerInstructionBuilder creates a new `SetAccessController` instruction builder.
func NewSetAccessControllerInstructionBuilder() *SetAccessController {
	nd := &SetAccessController{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetVerifierAccountAccount sets the "verifierAccount" account.
func (inst *SetAccessController) SetVerifierAccountAccount(verifierAccount ag_solanago.PublicKey) *SetAccessController {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(verifierAccount).WRITE()
	return inst
}

// GetVerifierAccountAccount gets the "verifierAccount" account.
func (inst *SetAccessController) GetVerifierAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *SetAccessController) SetOwnerAccount(owner ag_solanago.PublicKey) *SetAccessController {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *SetAccessController) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetAccessControllerAccount sets the "accessController" account.
func (inst *SetAccessController) SetAccessControllerAccount(accessController ag_solanago.PublicKey) *SetAccessController {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(accessController)
	return inst
}

// GetAccessControllerAccount gets the "accessController" account.
func (inst *SetAccessController) GetAccessControllerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst SetAccessController) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetAccessController,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetAccessController) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetAccessController) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.VerifierAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.AccessController is not set")
		}
	}
	return nil
}

func (inst *SetAccessController) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetAccessController")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        verifier", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("           owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("accessController", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj SetAccessController) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SetAccessController) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSetAccessControllerInstruction declares a new SetAccessController instruction with the provided parameters and accounts.
func NewSetAccessControllerInstruction(
	// Accounts:
	verifierAccount ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	accessController ag_solanago.PublicKey) *SetAccessController {
	return NewSetAccessControllerInstructionBuilder().
		SetVerifierAccountAccount(verifierAccount).
		SetOwnerAccount(owner).
		SetAccessControllerAccount(accessController)
}
