// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package verifier

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetConfigActive is the `setConfigActive` instruction.
type SetConfigActive struct {
	DonConfigIndex *uint64
	IsActive       *uint8

	// [0] = [WRITE] verifierAccount
	//
	// [1] = [SIGNER] owner
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSetConfigActiveInstructionBuilder creates a new `SetConfigActive` instruction builder.
func NewSetConfigActiveInstructionBuilder() *SetConfigActive {
	nd := &SetConfigActive{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 2),
	}
	return nd
}

// SetDonConfigIndex sets the "donConfigIndex" parameter.
func (inst *SetConfigActive) SetDonConfigIndex(donConfigIndex uint64) *SetConfigActive {
	inst.DonConfigIndex = &donConfigIndex
	return inst
}

// SetIsActive sets the "isActive" parameter.
func (inst *SetConfigActive) SetIsActive(isActive uint8) *SetConfigActive {
	inst.IsActive = &isActive
	return inst
}

// SetVerifierAccountAccount sets the "verifierAccount" account.
func (inst *SetConfigActive) SetVerifierAccountAccount(verifierAccount ag_solanago.PublicKey) *SetConfigActive {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(verifierAccount).WRITE()
	return inst
}

// GetVerifierAccountAccount gets the "verifierAccount" account.
func (inst *SetConfigActive) GetVerifierAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *SetConfigActive) SetOwnerAccount(owner ag_solanago.PublicKey) *SetConfigActive {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *SetConfigActive) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

func (inst SetConfigActive) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetConfigActive,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetConfigActive) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetConfigActive) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.DonConfigIndex == nil {
			return errors.New("DonConfigIndex parameter is not set")
		}
		if inst.IsActive == nil {
			return errors.New("IsActive parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.VerifierAccount is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
	}
	return nil
}

func (inst *SetConfigActive) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetConfigActive")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("DonConfigIndex", *inst.DonConfigIndex))
						paramsBranch.Child(ag_format.Param("      IsActive", *inst.IsActive))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=2]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("verifier", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("   owner", inst.AccountMetaSlice.Get(1)))
					})
				})
		})
}

func (obj SetConfigActive) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `DonConfigIndex` param:
	err = encoder.Encode(obj.DonConfigIndex)
	if err != nil {
		return err
	}
	// Serialize `IsActive` param:
	err = encoder.Encode(obj.IsActive)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetConfigActive) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `DonConfigIndex`:
	err = decoder.Decode(&obj.DonConfigIndex)
	if err != nil {
		return err
	}
	// Deserialize `IsActive`:
	err = decoder.Decode(&obj.IsActive)
	if err != nil {
		return err
	}
	return nil
}

// NewSetConfigActiveInstruction declares a new SetConfigActive instruction with the provided parameters and accounts.
func NewSetConfigActiveInstruction(
	// Parameters:
	donConfigIndex uint64,
	isActive uint8,
	// Accounts:
	verifierAccount ag_solanago.PublicKey,
	owner ag_solanago.PublicKey) *SetConfigActive {
	return NewSetConfigActiveInstructionBuilder().
		SetDonConfigIndex(donConfigIndex).
		SetIsActive(isActive).
		SetVerifierAccountAccount(verifierAccount).
		SetOwnerAccount(owner)
}
