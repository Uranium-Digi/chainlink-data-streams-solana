// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package verifier

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "Verifier"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_Verify = ag_binary.TypeID([8]byte{133, 161, 141, 48, 120, 198, 88, 150})

	Instruction_SetConfigWithActivationTime = ag_binary.TypeID([8]byte{189, 64, 69, 231, 128, 29, 197, 29})

	Instruction_SetConfig = ag_binary.TypeID([8]byte{108, 158, 154, 175, 212, 98, 52, 66})

	Instruction_SetConfigActive = ag_binary.TypeID([8]byte{90, 95, 224, 173, 96, 184, 36, 136})

	Instruction_RemoveLatestConfig = ag_binary.TypeID([8]byte{171, 221, 188, 175, 156, 87, 156, 63})

	// Used to Set the access controller
	// We use an optional access controller.
	// See https://github.com/coral-xyz/anchor/pull/2101 on how option works in Anchor
	Instruction_SetAccessController = ag_binary.TypeID([8]byte{86, 87, 56, 58, 148, 233, 95, 125})

	// initialize into existence the verifier account. You must realloc after this
	Instruction_Initialize = ag_binary.TypeID([8]byte{175, 175, 109, 31, 13, 152, 155, 237})

	// Initializes the verifier (admin) account data. Call after initialize + realloc
	// We use an optional access controller.
	// See https://github.com/coral-xyz/anchor/pull/2101 on how option works in Anchor
	Instruction_InitializeAccountData = ag_binary.TypeID([8]byte{15, 88, 71, 247, 173, 45, 110, 216})

	Instruction_ReallocAccount = ag_binary.TypeID([8]byte{51, 237, 126, 233, 52, 244, 186, 244})

	Instruction_TransferOwnership = ag_binary.TypeID([8]byte{65, 177, 215, 73, 53, 45, 99, 47})

	Instruction_AcceptOwnership = ag_binary.TypeID([8]byte{172, 23, 43, 13, 238, 213, 85, 150})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_Verify:
		return "Verify"
	case Instruction_SetConfigWithActivationTime:
		return "SetConfigWithActivationTime"
	case Instruction_SetConfig:
		return "SetConfig"
	case Instruction_SetConfigActive:
		return "SetConfigActive"
	case Instruction_RemoveLatestConfig:
		return "RemoveLatestConfig"
	case Instruction_SetAccessController:
		return "SetAccessController"
	case Instruction_Initialize:
		return "Initialize"
	case Instruction_InitializeAccountData:
		return "InitializeAccountData"
	case Instruction_ReallocAccount:
		return "ReallocAccount"
	case Instruction_TransferOwnership:
		return "TransferOwnership"
	case Instruction_AcceptOwnership:
		return "AcceptOwnership"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"verify", (*Verify)(nil),
		},
		{
			"set_config_with_activation_time", (*SetConfigWithActivationTime)(nil),
		},
		{
			"set_config", (*SetConfig)(nil),
		},
		{
			"set_config_active", (*SetConfigActive)(nil),
		},
		{
			"remove_latest_config", (*RemoveLatestConfig)(nil),
		},
		{
			"set_access_controller", (*SetAccessController)(nil),
		},
		{
			"initialize", (*Initialize)(nil),
		},
		{
			"initialize_account_data", (*InitializeAccountData)(nil),
		},
		{
			"realloc_account", (*ReallocAccount)(nil),
		},
		{
			"transfer_ownership", (*TransferOwnership)(nil),
		},
		{
			"accept_ownership", (*AcceptOwnership)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
